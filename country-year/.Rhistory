attributeIndex
for(i in 1:length(rawData)){
row <- rawData[i]
#First, take the row names (dimensions), split them out, and parse them
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
#observation i, at column j is equal to 'dimensionValue', the +1 in the index corrects for how R indexes
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
#Case for when null crops up in the value (when there aren't any options)
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
}
}else{
#The first one is just the value, it doesn't have a structure
attributeValue <- as.double(row[[1]][[j]])
}
#We have to add ndim to account for the fact that we've shifted the attributes to the back
data[i,ndim+j] <- attributeValue
}
}
View(data)
sum(data$OBS_VALUE)
sum(sdmxData$OBS_VALUE)
names(sdmxData)
#check the presence of a BOM
BOM <- "\ufeff"
if(attr(regexpr(BOM, content), "match.length") != - 1){
content <- gsub(BOM, "", content)
}
#Parse JSON
rawJson <- fromJSON(content)
#Extract data
rawData <- rawJson$dataSets[[1]]$observations
#Extract structure
rawStructure <- rawJson$structure
#dimensions are coded in row names (e.g. 0:0:0:0:0:0)
dimensions <- rawStructure$dimensions[[1]]
#attributes are coded in values, with [1] being obs_value, and all else as defined by this variable
attributes <- rawStructure$attributes$observation
#column names are derived from both dimensions and attributes
names <- c(sapply(dimensions, "[[", 2),"obsValue",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
#Placeholder for OBS_VALUE
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
#Set column names. We've arbitrarily put dimensions first and attributes second
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
#Parse raw data
for(i in 1:length(rawData)){
row <- rawData[i]
#First, take the row names (dimensions), split them out, and parse them
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
#observation i, at column j is equal to 'dimensionValue', the +1 in the index corrects for how R indexes
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
#Case for when null crops up in the value (when there aren't any options)
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
#I picked [[2]] for "name", if you want "id" it needs to be [[1]]
}
}else{
#The first one is just the value, it doesn't have a structure
attributeValue <- as.double(row[[1]][[j]])
}
#We have to add ndim to account for the fact that we've shifted the attributes to the back
data[i,ndim+j] <- attributeValue
}
}
View(data)
sum(sdmxData$obsValue)
sum(data$obsValue)
names(data)
names(data)[which(names(data)=="Year")]
names(data)[which(names(data)=="Year")] <- "obsTime"
names(data)
#Necessary libraries
library(RCurl)
library(rjson)
OECD <- function(url){
content <- getURL(url, httpheader = list('User-Agent' = 'rsdmx-json/0.0.1'), ssl.verifypeer = FALSE, .encoding = "UTF-8")
BOM <- "\ufeff"
if(attr(regexpr(BOM, content), "match.length") != - 1){
content <- gsub(BOM, "", content)
}
rawJson <- fromJSON(content)
rawData <- rawJson$dataSets[[1]]$observations
rawStructure <- rawJson$structure
dimensions <- rawStructure$dimensions[[1]]
attributes <- rawStructure$attributes$observation
names <- c(sapply(dimensions, "[[", 2),"obsValue",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
for(i in 1:length(rawData)){
row <- rawData[i]
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
}
}else{
attributeValue <- as.double(row[[1]][[j]])
}
data[i,ndim+j] <- attributeValue
}
}
names(data)[which(names(data)=="Year")] <- "obsTime"
return(data)
}
url <- "http://stats.oecd.org/SDMX-JSON/data/TABLE1/20005+20001.1.5+1010+2102.1121+1122.A+D+N/all?startTime=2005&endTime=2014&dimensionAtObservation=allDimensions"
data <- OECD(url)
url <- "http://stats.oecd.org/SDMX-JSON/data/TABLE1/20005+20001+801+1+2+301+68+3+18+4+5+40+20+21+6+701+742+22+7+820+8+76+9+69+61+50+10+11+12+302+20002+918+20006+72+62+30+82+75+546+552+83+70+84+45+77+87+566+732+764+55+576+20007.1.5+1010+1015+1100+1110+1120+1200+1210+1211+1212+1213+1214+1220+1230+1300+1310+1311+1320+1330+1301+1400+1410+1420+1500+1510+1520+1600+1610+1611+1612+1613+1614+1620+1621+1622+1623+1624+1630+1640+1700+1800+1810+1820+1900+1999+99999+1901+1902+1903+1904+1905+1906+60+70+2000+2100+2101+2102+2103+2104+547+2105+2106+2107+2108+2110+2901+2902+230+235+240+265+266+294+291+292+293+280+287+300+301+302+310+303+295+299+298+102+325+326+327+795+800+805+786+330+332+340+345+353+384+751+752+753+386+756+761+388+389+103+359+415+425+420+207+1+2+3+4.1121+1122+1120+1130+1140+1151+1152+1150.A+D+N/all?startTime=2005&endTime=2014&dimensionAtObservation=allDimensions"
data <- OECD(url)
View(data)
content <- getURL(url, httpheader = list('User-Agent' = 'rsdmx-json/0.0.1'), ssl.verifypeer = FALSE, .encoding = "UTF-8")
BOM <- "\ufeff"
if(attr(regexpr(BOM, content), "match.length") != - 1){
content <- gsub(BOM, "", content)
}
rawJson <- fromJSON(content)
rawData <- rawJson$dataSets[[1]]$observations
rawStructure <- rawJson$structure
dimensions <- rawStructure$dimensions[[1]]
attributes <- rawStructure$attributes$observation
names <- c(sapply(dimensions, "[[", 2),"obsValue",sapply(attributes, "[[", 1))
ndim <- length(sapply(dimensions, "[[", 2))
natt <- 1+length(sapply(attributes, "[[", 1))
ncol <- ndim+natt
data <- setNames(data.frame(matrix(ncol = ncol, nrow = 0)),names)
for(i in 1:length(rawData)){
row <- rawData[i]
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
}
}else{
attributeValue <- as.double(row[[1]][[j]])
}
data[i,ndim+j] <- attributeValue
}
}
length(rawData)
data <- setNames(data.frame(matrix(ncol = ncol, nrow = length(rawData))),names)
data <- setNames(data.frame(matrix(ncol = ncol, nrow = length(rawData))),names)
for(i in 1:length(rawData)){
row <- rawData[i]
rawDimensions <- names(row)
splitDimensions <- strsplit(rawDimensions,":")[[1]]
for(j in 1:length(splitDimensions)){
dimensionReference <- dimensions[[j]]$values
dimensionIndex <- as.integer(splitDimensions[j])+1
dimensionValue <- dimensionReference[[dimensionIndex]][[2]]
data[i,j] <- dimensionValue
}
for(j in 1:length(row[[1]])){
if(j>1){
attributeReference <- attributes[[j-1]]$values
rawAttIndex <- row[[1]][[j]]
if(is.null(rawAttIndex)){
attributeValue <- NA
}else{
attributeIndex <- as.integer(rawAttIndex)+1
attributeValue <- attributeReference[[attributeIndex]][[2]]
}
}else{
attributeValue <- as.double(row[[1]][[j]])
}
data[i,ndim+j] <- attributeValue
}
}
i
install.packages('timeline', repos='http://cran.r-project.org')
require(timeline)
data(ww2)
timeline(ww2, ww2.events, event.spots=2, event.label='', event.above=FALSE)
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))
plot<-plot+geom_segment(aes(y=0,yend=y,xend=year))
plot<-geom_text(aes(y=ytext,label=text),size=2.5,vjust=-1)
plot<-plot+geom_point(aes(y=y))
plot
plot<-plot+scale_y_continuous(limits=c(-2,2))
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))
+geom_segment(aes(y=0,yend=y,xend=year))
+geom_text(aes(y=ytext,label=text),size=2.5,vjust=-1)
+geom_point(aes(y=y))
+scale_y_continuous(limits=c(-2,2))
+geom_hline(y=0,size=1,color='purple')   #draw a vertical line
+geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)
+geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=ytext,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=text,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
plot<-ggplot(timeset,aes(x=year,y=0))
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=y,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
library(ggplot2)
timeset<-data.frame(year=c(1986,1995,2011,1990,1998,2010),text=c('I was born','Had a nice icecream','Spotted a dodo','First swim','Crashed my bicycle','Bought a helmet'),y=c(runif(3,.5,1),runif(3,-1,-.5)))
plot<-ggplot(timeset,aes(x=year,y=0))+
geom_segment(aes(y=0,yend=y,xend=year))+
geom_text(aes(y=y,label=text),size=2.5,vjust=-1)+
geom_point(aes(y=y))+
scale_y_continuous(limits=c(-2,2))+
geom_hline(y=0,size=1,color='purple')+
geom_segment(x=2011.4,xend=2012.2,y=.2,yend=0,color='purple',size=1)+
geom_segment(x=2011.4,xend=2012.2,y=-.2,yend=0,color='purple',size=1) #drawing the actual arrow
plot
?grepl
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
names(df)
pop <- read.csv("./population-total.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
keep <- c("id","year","value","budget.type")
totalRevGrants <- totalRevGrants[keep]
totalGrants <- totalGrants[keep]
dat <- merge(
totalRevGrants
,totalGrants
,by=c("id","year","budget.type")
,suffix=c(".total",".grant"))
dat <- transform(dat,value=(value.total-value.grant)*100)
keep <- c("id","year","value","budget.type")
dat <- dat[keep]
names(dat) <- c("id","year","value","budget-type")
dat <- merge(
dat,
pop,
by=c("id","year"),
suffix=c(".rev",".pop")
)
dat <- transform(dat,value=value.rev/value.pop)
dat <- transform(dat,value=value.rev/value.pop)
View(dat)
dat <- dat[keep]
write.csv(dat,"./non-grant-revenue-capita.csv",row.names=FALSE,na="")
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
keep <- c("id","year","value.ncu","budget.type")
totalRevGrants <- totalRevGrants[keep]
totalGrants <- totalGrants[keep]
dat <- merge(
totalRevGrants
,totalGrants
,by=c("id","year","budget.type")
,suffix=c(".total",".grant"))
dat <- transform(dat,value=(value.ncu.total-value.ncu.grant)*100)
View(dat)
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
keep <- c("id","year","value.ncu","budget.type")
totalRevGrants <- totalRevGrants[keep]
totalGrants <- totalGrants[keep]
dat <- merge(
totalRevGrants
,totalGrants
,by=c("id","year","budget.type")
,suffix=c(".total",".grant"))
dat <- transform(dat,value=(value.ncu.total-value.ncu.grant))
View(dat)
keep <- c("id","year","value","budget.type")
dat <- dat[keep]
names(dat) <- c("id","year","value","budget-type")
pop <- read.csv("./population-total.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
dat <- merge(
dat,
pop,
by=c("id","year"),
suffix=c(".rev",".pop")
)
dat <- transform(dat,value=value.rev/value.pop)
dat <- dat[keep]
View(dat)
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
keep <- c("id","year","value.ncu","budget.type")
totalRevGrants <- totalRevGrants[keep]
totalGrants <- totalGrants[keep]
dat <- merge(
totalRevGrants
,totalGrants
,by=c("id","year","budget.type")
,suffix=c(".total",".grant"))
dat <- transform(dat,value=(value.ncu.total-value.ncu.grant))
keep <- c("id","year","value","budget.type")
dat <- dat[keep]
pop <- read.csv("./population-total.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
dat <- merge(
dat,
pop,
by=c("id","year"),
suffix=c(".rev",".pop")
)
dat <- transform(dat,value=value.rev/value.pop)
dat <- dat[keep]
View(dat)
View(dat)
converter <- read.csv("../reference/implied-ppp.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
keep <- c("id","year","value.ncu","budget.type")
totalRevGrants <- totalRevGrants[keep]
totalGrants <- totalGrants[keep]
dat <- merge(
totalRevGrants
,totalGrants
,by=c("id","year","budget.type")
,suffix=c(".total",".grant")
,all.x=TRUE
)
dat <- transform(dat,value=(value.ncu.total-value.ncu.grant))
keep <- c("id","year","value","budget.type")
dat <- dat[keep]
converter <- read.csv("../reference/implied-ppp.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
dat <- merge(
dat
,converter
,by=c("id","year")
,suffix=c(".dat",".ppp")
,all.x=TRUE
)
View(dat)
deflator <- read.csv("../reference/gdp-deflator-constant-2012.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
names(deflator)
names(deflator) <- c("id","year","value.defl")
path<- "C:/git/digital-platform/country-year/"
setwd(path)
df <- read.csv("./domestic.csv",colClasses=c("character","numeric","character","character","character","character","character","character","character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
totalRevGrants <- subset(df,l1=="total-revenue-and-grants" & is.na(l2))
grantPhrases <- c("grants","official-grants","total-grants")
totalGrants <- subset(df,l1=="total-revenue-and-grants" & (l2 %in% grantPhrases) & is.na(l3))
# setdiff(unique(totalRevGrants$id),unique(totalGrants$id))
# jmGrants <- subset(df,id=="JM" & l3=="grants" & is.na(l4))
# totalGrants <- rbind(totalGrants,jmGrants)
keep <- c("id","year","value.ncu","budget.type")
totalRevGrants <- totalRevGrants[keep]
totalGrants <- totalGrants[keep]
dat <- merge(
totalRevGrants
,totalGrants
,by=c("id","year","budget.type")
,suffix=c(".total",".grant")
,all.x=TRUE
)
dat <- transform(dat,value=(value.ncu.total-value.ncu.grant))
keep <- c("id","year","value","budget.type")
dat <- dat[keep]
converter <- read.csv("../reference/implied-ppp.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
deflator <- read.csv("../reference/gdp-deflator-constant-2012.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
names(deflator) <- c("id","year","value.defl")
dat <- merge(
dat
,converter
,by=c("id","year")
,suffix=c(".dat",".ppp")
,all.x=TRUE
)
dat <- merge(
dat
,deflator
,by=c("id","year")
,all.x=TRUE
)
View(converter)
View(dat)
dat <- transform(dat,value=(value.dat*value.defl)/value.converter)
dat <- transform(dat,value=(value.dat*value.defl)/value.ppp)
View(dat)
keep <- c("id","year","value","budget.type")
dat <- dat[keep]
pop <- read.csv("./population-total.csv",colClasses=c("character","numeric","numeric"), header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
dat <- merge(
dat,
pop,
by=c("id","year"),
suffix=c(".rev",".pop"),
all.x=TRUE
)
dat <- transform(dat,value=value.rev/value.pop)
dat <- dat[keep]
names(dat) <- c("id","year","value","budget-type")
write.csv(dat,"./non-grant-revenue-PPP-capita.csv",row.names=FALSE,na="")
View(dat)
