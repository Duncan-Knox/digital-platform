addPolygons(fillColor = ~pal(districts2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup)
}
##Syntax is:
#ug_leaflet(series,indicator,year,value,classes,colorRamp)
#Map appears in viewer, legend appears in plots along with count of data in those bins
#DPR
ug_leaflet("country-year","uganda-gov-spend-pp",2015,"value",5,diRamp("purple"))
ug_leaflet("country-year","uganda-gov-spend-pp",2015,"value",6,diRamp("purple"))
ug_leaflet("country-year","uganda-gov-spend-pp",2014,"value",5,diRamp("purple"))
ug_leaflet("country-year","uganda-gov-spend-pp",2014,"value",c(20,25,30,35),diRamp("purple"))
path<- "C:/git/digital-platform/reference/"
setwd(path)
deflator <- read.csv("gdp-deflator-constant-2012.csv"
,header=T
,as.is=T
,na.strings="")
rate <- read.csv("exchange-rates.csv"
,header=T
,as.is=T
,na.strings="")
dat <- merge(deflator
,rate,
by=c("id","year")
,suffix=c(".def",".fx"))
dat$value <- dat$value.def*dat$value.fx
dat <- dat[c("id","year","value")]
write.csv(dat,"current-ncu-to-constant-2012-usd.csv",na="",row.names=F)
path<- "C:/git/digital-platform"
setwd(path)
df <- read.csv("./country-year/uganda-finance.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
mult <- read.csv("./reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value.ncu <- as.double(df$value.ncu)
df$value <- df$value.ncu
}else{
df$value <- as.double(df$value)
df$value.ncu <- df$value
}
for(i in 1:nrow(df)){
row = df[i,]
id = "UG"
year = row[2][1,1]
value = row[8][1,1]
multiplier = mult[which(mult$id==id),]
multiplier = multiplier[which(multiplier$year==year),3]
if(length(multiplier)<=0)
{
if(year!=2020){print(paste("No multiplier for:",id,year))}
df[i,8] = NA
}
else
{
value = value*multiplier
df[i,8] = value
}
}
names(df)[names(df) == "value.ncu"] <- "value-ncu"
write.csv(df,"./country-year/uganda-finance.csv",row.names=FALSE,na="")
library(plyr)
path<- "C:/git/digital-platform/country-year"
setwd(path)
df <- read.csv("./uganda-finance.csv", header = TRUE,sep=",",na.strings="",stringsAsFactors=FALSE)
#Total
exp <- subset(df,l1=="expenditure")
total <- ddply(exp,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(total) <- c("id","year","budget.type","total.value","total.value.ncu")
#Education
educ <- subset(exp,l2=="education")
educ <- ddply(educ,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(educ) <- c("id","year","budget.type","educ.value","educ.value.ncu")
#Health
health <- subset(exp,l2=="health")
health <- ddply(health,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(health) <- c("id","year","budget.type","health.value","health.value.ncu")
#Agri
agri <- subset(exp,l2=="production-and-marketing")
agri <- ddply(agri,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(agri) <- c("id","year","budget.type","agri.value","agri.value.ncu")
#Join
dfs <- list(
total
,educ
,health
,agri
)
data <- join_all(dfs)
data <- subset(data,id!="#N/A")
data <- transform(data,educ.percent=100*(educ.value/total.value))
data <- transform(data,health.percent=100*(health.value/total.value))
data <- transform(data,agri.percent=100*(agri.value/total.value))
keep <- c("id","year","budget.type","educ.percent","health.percent","agri.percent")
data <- data[keep]
educ.percent <- data[,c(1,2,3,4)]
names(educ.percent)[3:4] <- c("budget-type","value")
health.percent <- data[,c(1,2,3,5)]
names(health.percent)[3:4] <- c("budget-type","value")
agri.percent <- data[,c(1,2,3,6)]
names(agri.percent)[3:4] <- c("budget-type","value")
write.csv(educ.percent,"uganda-educ-percent.csv",row.names=FALSE,na="")
write.csv(health.percent,"uganda-health-percent.csv",row.names=FALSE,na="")
write.csv(agri.percent,"uganda-agri-percent.csv",row.names=FALSE,na="")
#Revenue
rev <- subset(df,l1=="revenue")
totalrev <- ddply(rev,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(totalrev) <- c("id","year","budget.type","total.value","total.value.ncu")
local <- subset(rev,l2=="locally-raised-revenues")
local <- ddply(local,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(local) <- c("id","year","budget.type","local.value","local.value.ncu")
donor <- subset(rev,l2=="donor-funding")
donor <- ddply(donor,.(id,year,budget.type),summarize,value=sum(value,na.rm=TRUE),value.ncu=sum(value.ncu,na.rm=TRUE))
names(donor) <- c("id","year","budget.type","donor.value","donor.value.ncu")
revdfs <- list(
totalrev
,local
,donor
)
revdata <- join_all(revdfs)
revdata <- subset(revdata,id!="#N/A")
revdata <- transform(revdata,local.percent=100*(local.value/total.value))
revdata <- transform(revdata,donor.percent=100*(donor.value/total.value))
keep <- c("id","year","budget.type","local.percent","donor.percent")
revdata <- revdata[keep]
local.percent <- revdata[,c(1,2,3,4)]
names(local.percent)[3:4] <- c("budget-type","value")
donor.percent <- revdata[,c(1,2,3,5)]
names(donor.percent)[3:4] <- c("budget-type","value")
write.csv(local.percent,"uganda-local-percent.csv",row.names=FALSE,na="")
write.csv(donor.percent,"uganda-donor-percent.csv",row.names=FALSE,na="")
path<- "C:/git/digital-platform/country-year"
setwd(path)
df <- read.csv("./uganda-finance.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
pop <- read.csv("./uganda-total-pop.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
idCol <- c()
yearCol <- c()
budgetCol <- c()
spendppCol <- c()
spendppncuCol <- c()
districts <- unique(df$id)
years <- unique(df$year)
budgets <- unique(df[,'budget-type'])
for(i in 1:length(districts)){
id <- districts[i]
for(j in 1:length(years)){
year <- years[j]
for(k in 1:length(budgets)){
budget <- budgets[k]
matches <- df[which(df$id==id & df$year==year & df[,'budget-type']==budget & df$l1=="expenditure"),]
total <- sum(matches$value)
totalncu <- sum(matches[,'value-ncu'])
popul <- pop[which(pop$id==id & pop$year==(year-1)),]$value
if(length(popul)>0){
population <- popul[1]
spendpp <- total/population
spendppNCU <- totalncu/population
idCol <- c(idCol,id)
yearCol <- c(yearCol,(year-1))
budgetCol <- c(budgetCol,budget)
spendppCol <- c(spendppCol,spendpp)
spendppncuCol <- c(spendppncuCol,spendppNCU)
}
}
}
}
data <- data.frame(idCol,
yearCol,
budgetCol,
spendppCol,
spendppncuCol)
names(data) <- c("id","year","budget-type","value","value-ncu")
write.csv(data,"uganda-gov-spend-pp.csv",row.names=FALSE,na="")
path<- "C:/git/digital-platform"
setwd(path)
df <- read.csv("./country-year/domestic.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
mult <- read.csv("./reference/current-ncu-to-constant-2012-usd.csv", header = TRUE,sep=",",na.strings="",check.names=FALSE,stringsAsFactors=FALSE)
if("value-ncu" %in% colnames(df)){
names(df)[names(df)=="value-ncu"] <- "value.ncu"
df$value <- df$value.ncu
}else{
df$value.ncu <- df$value
}
for(i in 1:nrow(df)){
row = df[i,]
id = row[1][1,1]
year = row[2][1,1]
value = row[11][1,1]
multiplier = mult[which(mult$id==id),]
multiplier = multiplier[which(multiplier$year==year),3]
if(length(multiplier)<=0)
{
if(year!=2020){print(paste("No multiplier for:",id,year))}
df[i,11] = NA
}
else
{
value = value*multiplier
df[i,11] = value
}
}
names(df)[names(df) == "value.ncu"] <- "value-ncu"
write.csv(df,"./country-year/domestic.csv",row.names=FALSE,na="")
#install.packages('plyr')
require(plyr)
setwd("C:/git/digital-platform/latest-year")
filenames <- list.files("C:/git/digital-platform/country-year", pattern="*.csv", full.names=TRUE)
latestYear <- function(data)
{
return(
ddply(data,.(id),function(x)
{
naLen <- nrow(x[which(is.na(x$value)),])
allLen <- nrow(x)
valueLen <- allLen-naLen
if(valueLen>=1)
{
for(i in 1:length(x$value))
{
if(!is.na(x$value[i])){
latestId = x$id[i]
latestYear = x$year[i]
latestVal = x$value[i]
}
}
}
else
{
latestId = x$id[1]
latestYear = max(x$year)
latestVal = NA
}
y <- c(latestYear,latestVal)
return(y)
}
)
)
}
for (i in 1:length(filenames))
{
data <- read.csv(filenames[i], header = TRUE,sep=",",na.strings="",check.names=FALSE)
names <- colnames(data)
if("id" %in% names & "year" %in% names & "value" %in% names)
{
data <- data[order(data$id,data$year),]
data <- latestYear(data)
names(data)[names(data) == "V1"] <- "year"
names(data)[names(data) == "V2"] <- "value"
write.csv(data,basename(filenames[i]),row.names=FALSE,na="")
}
}
#install.packages('reshape')
#install.packages("utils")
#install.packages("openxlsx")
library(openxlsx)
library(reshape)
library(utils)
wd <- "C:/git/digital-platform/user-data/"
setwd(wd)
#Delete everything in user-data
unlink(dir(wd, full.names = TRUE),recursive=TRUE)
#List all files in country-year
filenames <- list.files("C:/git/digital-platform/country-year/", pattern="*.csv", full.names=TRUE)
#Define references and mapping
refPath = "C:/git/digital-platform/reference/"
conceptPath = "C:/git/digital-platform/concepts.csv"
concepts <- read.csv(conceptPath, header = TRUE,sep=",",na.strings="",check.names=FALSE,as.is=TRUE)
refMap <- list("domestic"="budget-type,domestic-budget-level,domestic-sources,currency,fiscal-year")
refMap <- c(refMap,"domestic-sectors"="budget-type,domestic-budget-level,domestic-sources,currency,fiscal-year")
refMap <- c(refMap,"domestic-netlending"="budget-type,domestic-budget-level,domestic-sources,currency,fiscal-year")
refMap <- c(refMap,"intl-flows-donors"="flow-type,flow-name")
refMap <- c(refMap,"intl-flows-recipients"="flow-type,flow-name")
refMap <- c(refMap,"intl-flows-donors-wide"="flow-type,flow-name")
refMap <- c(refMap,"intl-flows-recipients-wide"="flow-type,flow-name")
refMap <- c(refMap,"largest-intl-flow"="largest-intl-flow")
refMap <- c(refMap,"fragile-states"="fragile-states")
refMap <- c(refMap,"long-term-debt"="debt-flow,destination-institution-type,creditor-type,creditor-institution,financing-type")
refMap <- c(refMap,"oda"="sector,bundle,channel")
refMap <- c(refMap,"oof"="sector,oof-bundle,channel")
refMap <- c(refMap,"fdi-out"="financing-type")
refMap <- c(refMap,"dfis-out-dev"="financing-type")
refMap <- c(refMap,"ssc-out"="financing-type")
#Uganda
refMap <- c(refMap,"uganda-finance"="uganda-budget-level")
#Iterate through files, reading them in
for (i in 1:length(filenames))
{
#Read Data
data <- read.csv(filenames[i], header = TRUE,sep=",",na.strings="",check.names=FALSE)
names <- colnames(data)
basename = substr(basename(filenames[i]), 1, nchar(basename(filenames[i])) - 4)
fwd = paste(wd,basename,sep="/")
#Add country names
entities <- read.csv(paste(refPath,"entity.csv",sep="/"),as.is=TRUE,na.strings="")[c("id","name")]
districts <- read.csv(paste(refPath,"uganda-district-entity.csv",sep="/"),as.is=TRUE,na.strings="")[c("id","name")]
names(districts) <- c("id","entity-name")
names(entities) <- c("id","entity-name")
if("id" %in% names){
data <- merge(
entities
,data
,by=c("id")
,all.y=TRUE
)
}
else{
if("id-to" %in% names){
names(entities) <- c("id-to","entity-to-name")
data <- merge(
entities
,data
,by=c("id-to")
,all.y=TRUE
)
}
if("id-from" %in% names){
names(entities) <- c("id-from","entity-from-name")
data <- merge(
entities
,data
,by=c("id-from")
,all.y=TRUE
)
}
}
#Special Uganda-data case
if(substr(basename,1,7)=="uganda-"){
data <- data[,-which(names(data) %in% c("entity-name"))]
if("id" %in% names){
data <- merge(
districts
,data
,by=c("id")
,all.y=TRUE
)
}
}
#Try and sort by entity name, failing that: id, failing that: year, failing that, the first column.
names <- colnames(data)
if("entity-name" %in% names){
if("year" %in% names){
data <- data[order(data["entity-name"],data$year),]
}else{
data <- data[order(data["entity-name"]),]
}
}
else if("entity-to-name" %in% names){
if("year" %in% names){
data <- data[order(data["entity-to-name"],data$year),]
}else{
data <- data[order(data["entity-to-name"]),]
}
}
else if("entity-from-name" %in% names){
if("year" %in% names){
data <- data[order(data["entity-from-name"],data$year),]
}else{
data <- data[order(data["entity-from-name"]),]
}
}
else if("id" %in% names){
if("year" %in% names){
data <- data[order(data["id"],data$year),]
}else{
data <- data[order(data["id"]),]
}
}
else{
if("year" %in% names){
data <- data[data$year,]
}else{
data <- data[order(data[,1]),]
}
}
#Create a folder for each indicator with sub-csv dir
dir.create(fwd)
setwd(fwd)
cwd = paste(fwd,"csv",sep="/")
dir.create(cwd)
#Create workbook
wb <- createWorkbook(basename)
#Start notes sheet/csv
concept = concepts[which(concepts$id==basename),]
notesList <- c(
paste("Name:",basename)
,paste("Description:",concept$description)
,paste("Units of measure:",concept$uom)
,paste("Source:",concept[,"source"])
,if(!is.na(concept[,"source-link"])) c(paste("Source-link:",concept[,"source-link"]),"") else ""
,"Notes:"
,if(!is.na(concept[,"calculation"])) c("",concept[,"calculation"],"") else ""
)
interpolated <- concept$interpolated[1]
if(!is.na(interpolated)){
notesList<-c(
notesList
,"This data contains interpolated values. The interpolated values are typically contained in a column called 'value,' while the uninterpolated values are stored in 'original-value.'"
,""
)
}
if("estimate" %in% names){
notesList<-c(
notesList
,"This data contains information that may be a projection. Projected datapoints are indicated by a value of TRUE in the 'estimate' column. The year at which projections begin varies from country to country."
,""
)
}
if("value-ncu" %in% names){
notesList<-c(
notesList
,"This data contains information that has been converted from current native currency units (NCU) to constant US Dollars. The NCU values are contained in the 'value-ncu' column, while the converted and deflated values are contained in the 'value' column."
,""
)
}
addWorksheet(wb,"Notes")
#Copy the data
write.csv(data,paste0(cwd,"/",basename,".csv"),row.names=FALSE,na="")
addWorksheet(wb,"Data")
writeData(wb,sheet="Data",data,colNames=TRUE,rowNames=FALSE)
#If we have an ID, a year to widen it by and it's simple, provide wide
if("id" %in% names & "year" %in% names & "value" %in% names & concept$type=="simple")  {
if("entity-name" %in% names){
wdata <- reshape(data[c("id","entity-name","year","value")],idvar=c("id","entity-name"),timevar="year",direction="wide")
}else{
wdata <- reshape(data[c("id","year","value")],idvar=c("id"),timevar="year",direction="wide")
}
wnames <- names(wdata)
for(j in 1:length(wnames)){
wname = wnames[j]
if(substr(wname,1,5)=="value"){
names(wdata)[names(wdata) == wname] <- substr(wname,7,nchar(wname))
}
}
notesList<-c(
notesList
,"On the 'Data-wide-value' sheet, we have provided the indicator in a wide format. The values you see listed there are from the 'value' column."
,""
)
addWorksheet(wb,"Data-wide-value")
writeData(wb,sheet="Data-wide-value",wdata,colNames=TRUE,rowNames=FALSE)
write.csv(wdata,paste(cwd,"/",basename,"-wide-value",".csv",sep=""),row.names=FALSE,na="")
}
#Wide for original-value
if("id" %in% names & "year" %in% names & "original-value" %in% names & concept$type=="simple")  {
if("entity-name" %in% names){
wdata <- reshape(data[c("id","entity-name","year","original-value")],idvar=c("id","entity-name"),timevar="year",direction="wide")
}else{
wdata <- reshape(data[c("id","year","original-value")],idvar=c("id"),timevar="year",direction="wide")
}
wnames <- names(wdata)
for(j in 1:length(wnames)){
wname = wnames[j]
if(substr(wname,1,14)=="original-value"){
names(wdata)[names(wdata) == wname] <- substr(wname,16,nchar(wname))
}
}
notesList<-c(
notesList
,"On the 'Data-wide-original-value' sheet, we have provided the indicator in a wide format. The values you see listed there are from the 'original-value' column."
,""
)
addWorksheet(wb,"Data-wide-original-value")
writeData(wb,sheet="Data-wide-original-value",wdata,colNames=TRUE,rowNames=FALSE)
write.csv(wdata,paste(cwd,"/",basename,"-wide-original-value",".csv",sep=""),row.names=FALSE,na="")
}
#Reference
#Copy entity.csv
file.copy(paste(refPath,"entity.csv",sep=""),paste(cwd,"entity.csv",sep="/"))
if(basename %in% names(refMap)){
refNames = strsplit(refMap[[basename]],",")[[1]]
notesList<-c(
notesList
,"The following tabs have been included for reference purposes:"
,paste(refNames,collapse=", ")
,""
)
for(j in 1:length(refNames)){
refBaseName = refNames[j]
refName = paste(refPath,refBaseName,".csv",sep="")
#Copy the reference files
file.copy(refName,paste(cwd,"/",refBaseName,".csv",sep=""))
refData <- read.csv(refName,as.is=TRUE,na.strings="")
addWorksheet(wb,refBaseName)
writeData(wb,sheet=refBaseName,refData,colNames=TRUE,rowNames=FALSE)
}
}
#Cap off notes sheet
notesList<-c(
notesList
,""
,""
,"The following is data downloaded from Development Initiative's Datahub: http://devinit.org/data"
,"It is licensed under a Creative Commons Attribution 4.0 International license."
,"More information on licensing is available here: https://creativecommons.org/licenses/by/4.0/"
,"For concerns, questions, or corrections: please email info@devinit.org"
,"Copyright Development Initiatives Poverty Research Ltd. 2015"
)
notesDf <- data.frame(notesList)
writeData(wb,sheet="Notes",notesDf,colNames=FALSE,rowNames=FALSE)
write.table(notesDf,paste0(cwd,"/",basename,"-notes",".csv"),col.names=FALSE,row.names=FALSE,na="",sep=",")
saveWorkbook(wb, paste0(basename,".xlsx"), overwrite = TRUE)
#Go back to user-data folder
setwd(wd)
}
#Zip em up
filenames <- list.files(wd, pattern="/*", full.names=FALSE)
for(i in 1:length(filenames)){
files <- dir(filenames[i],full.names=TRUE)
zip(zipfile = filenames[i],files=files)
}
